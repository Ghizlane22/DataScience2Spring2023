#which randomy draws WITHOUT replacement from a specified vector. For example, to choose a number at random between 1 and 10:
sample(1:10, 1)
# There are several ways to generate randomness in R. The simplest function is
?sample
f1 <- function(x) x*2 + 1
f1(3)
f1(7)
ex.vector <- c(2,7,4,24,13,8,12)
f1(ex.vector)
f2 <- function(x,y){
z = x %% y
return(z == 0)
}
f2(8,9)
f2(14,7)
### 3.2
# Based on the definition of the mean from today's lecture, write a function that calculates the mean of all of the elements of a vector. assign it to the object my.mean. You will find the functions 'sum' and 'length' useful here.
mean_of_vector <- function(x) {
if(length(x) == 0) {
return(NA)  # return NA if the input vector is empty
} else {
return(mean(x))
}
}
f(2)
# There are several ways to generate randomness in R. The simplest function is
?sample
#which randomy draws WITHOUT replacement from a specified vector. For example, to choose a number at random between 1 and 10:
sample(1:10, 1)
# You can run this several times and notice that you get a different answer each time. You can also sample several times at once
sample(1:10, 3)
# However, by default, sample won't let the same number repeat when you do this. This is called sampling without replacement, because it is as if, each time you pick out a number, it is now gone from the pool of possible numbers and has not been replaced.
# If you want to sample randomly between 1 and 10 20 times, each time chossing between all 10 numbers, you have to write:
sample(1:10, 20, replace = TRUE)
# You can run this several times and notice that you get a different answer each time. You can also sample several times at once
sample(1:10, 3)
#which randomy draws WITHOUT replacement from a specified vector. For example, to choose a number at random between 1 and 10:
sample(1:10, 1)
# You can run this several times and notice that you get a different answer each time. You can also sample several times at once
sample(1:10, 3)
# However, by default, sample won't let the same number repeat when you do this. This is called sampling without replacement, because it is as if, each time you pick out a number, it is now gone from the pool of possible numbers and has not been replaced.
# If you want to sample randomly between 1 and 10 20 times, each time chossing between all 10 numbers, you have to write:
sample(1:10, 20, replace = TRUE)
# However, by default, sample won't let the same number repeat when you do this. This is called sampling without replacement, because it is as if, each time you pick out a number, it is now gone from the pool of possible numbers and has not been replaced.
# If you want to sample randomly between 1 and 10 20 times, each time chossing between all 10 numbers, you have to write:
sample(1:10, 20, replace = TRUE)
# The function runif(n, min,max) samples n times from a uniform function bounded between the values of min and max. For example, try
runif(5,0,1)
# Roll two dice 10 times and create histogram
hist(roll_dice(10), breaks=1:12, main="Double dice rolls (n=10)", xlab="Sum of dice rolls")
### 4.1
# Write a function that simulates the roll of 2 6-sided dice, where the argument x is the number of times you roll the 2 dice, and the output is a vector of length x, where each element corresponds to the sum of the two sides of the dice.
# HINT: one way to do this is to start by writing a function for a single 6-sided die, then create a new function that repeats the first function twice and adds up the result.
roll_dice <- function(x) {
rolls <- vector(length = x)  # create an empty vector to store the results
for (i in 1:x) {
dice1 <- sample(1:6, 1, replace = TRUE)  # roll the first die
dice2 <- sample(1:6, 1, replace = TRUE)  # roll the second die
rolls[i] <- dice1 + dice2  # sum the two dice rolls and store the result
}
return(rolls)  # return the vector of results
}
# Roll two dice 10 times and create histogram
hist(roll_dice(10), breaks=1:12, main="Double dice rolls (n=10)", xlab="Sum of dice rolls")
# Roll two dice 50 times and create histogram
hist(roll_dice(50), breaks=1:12, main="Double dice rolls (n=50)", xlab="Sum of dice rolls")
# Roll two dice 100 times and create histogram
hist(roll_dice(100), breaks=1:12, main="Double dice rolls (n=100)", xlab="Sum of dice rolls")
# Roll two dice 1000 times and create histogram
hist(roll_dice(1000), breaks=1:12, main="Double dice rolls (n=1000)", xlab="Sum of dice rolls")
# Roll two dice 10000 times and create histogram
hist(roll_dice(10000), breaks=1:12, main="Double dice rolls (n=10000)", xlab="Sum of dice rolls")
# The function runif(n, min,max) samples n times from a uniform function bounded between the values of min and max. For example, try
runif(5,0,1)
# The function runif(n, min,max) samples n times from a uniform function bounded between the values of min and max. For example, try
runif(5,0,1)
### 4.3
# Using runif, write a function that returns TRUE 22% of the time and FALSE 78% of the time
return_true_22_percent <- function() {
random_number <- runif(1)  # generate a random number between 0 and 1
if (random_number <= 0.22) {
return(TRUE)
} else {
return(FALSE)
}
}
### 4.6
# What is the probability density for a uniform pdf bounded between 0 and 0.5 associated with all values of x between 0 and 0.5?
# f(x) = 2, 0 ≤ x ≤ 0.5
#0, otherwise
### 4.7
# What is the probability density for a uniform pdf bounded between 0 and 2 associated with all values of x between 0 and 2?
#f(x) = 1/2, 0 ≤ x ≤ 2
# 0, otherwise
### 4.8
# run the following code:
dunif(0.5,0,1)
dunif(2,0,1)
dunif(0.2,0,0.5)
dunif(1.3,0,2)
git add C:/Users/LAPTOP/Desktop/GREAT_UM6P/Sem_2/data_sc_2/DataScience2Spring2023/Labs/.RData]
git add C:/Users/LAPTOP/Desktop/GREAT_UM6P/Sem_2/data_sc_2/DataScience2Spring2023/Labs/.RData
git add "C:/Users/LAPTOP/Desktop/GREAT_UM6P/Sem_2/data_sc_2/DataScience2Spring2023/Labs/.RData"
git add "C:/Users/LAPTOP/Desktop/GREAT_UM6P/Sem_2/data_sc_2/DataScience2Spring2023/Labs.R"
